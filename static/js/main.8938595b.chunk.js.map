{"version":3,"sources":["sampleText.js","App.js","serviceWorker.js","index.js"],"names":["sampleText","App","Component","state","text","handleChange","event","target","value","this","setState","renderText","__html","marked","componentDidMount","localStorage","getItem","componentDidUpdate","setItem","render","className","src","alt","height","width","onChange","rows","dangerouslySetInnerHTML","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iOAAO,MAAMA,EAAa,mkBCM1B,MAAMC,UAAYC,YAAW,eAAD,oBAC1BC,MAAQ,CACNC,KAAMJ,GAFkB,KAoB1BK,aAAeC,IACb,MAAMF,EAAOE,EAAMC,OAAOC,MAC1BC,KAAKC,SAAS,CAAEN,UAtBQ,KAyB1BO,WAAaP,IAEJ,CAAEQ,OADMC,IAAOT,KArBxBU,oBACE,MAAMV,EAAOW,aAAaC,QAAQ,QAE9BZ,EACFK,KAAKC,SAAS,CAAEN,SAEhBK,KAAKC,SAAS,CAAEN,KAAMJ,IAI1BiB,qBAAuB,MACbb,EAASK,KAAKN,MAAdC,KACRW,aAAaG,QAAQ,OAAQd,GAa/Be,SACE,OACE,yBAAKC,UAAU,aACb,yBAAKC,IAAI,gBAAgBC,IAAI,OAAOC,OAAO,MAAMC,MAAM,MAAMJ,UAAU,SACvE,yBAAKA,UAAU,OACb,yBAAKA,UAAU,iBACb,8BACEK,SAAUhB,KAAKJ,aACfG,MAAOC,KAAKN,MAAMC,KAClBgB,UAAU,eACVM,KAAK,QAET,yBAAKN,UAAU,iBACb,yBAAKO,wBAAyBlB,KAAKE,WAAWF,KAAKN,MAAMC,YAQtDH,QC7CK2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASd,OAAO,kBAAC,EAAD,MAASe,SAASC,eAAe,SDsH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAKC,IACjCA,EAAaC,gB","file":"static/js/main.8938595b.chunk.js","sourcesContent":["export const sampleText = '## `Markdown à Gauche / Html à Droite`  \\n  \\n###### Titre h6\\n##### Titre h5 \\n#### Titre h4\\n### Titre h3\\n## Titre h2\\n# Titre h1\\n \\nLes paragraphes sont séparés\\npar une ligne vide.\\n\\nLaissé deux espaces à la fin d\\'une ligne pour  \\naller à la ligne.\\n\\n*italique*, **gras**, \\n`monospace`, ~~rayé~~.\\n\\nListe:\\n\\n  * premier\\n  * second\\n  * troisiéme\\n\\nListe numérotée:\\n\\n  1. un\\n  2. deux\\n  3. trois\\n\\n *[MyGithub](https://github.com/am-you)* \\n\\n Lien automatique : https://www... \\n  ---\\n---\\n\\n  ` console.log(\"hello\");`  \\n';\n","import React, { Component } from 'react';\nimport './index.css';\nimport marked from 'marked';\n\nimport { sampleText } from './sampleText';\n\nclass App extends Component {\n  state = {\n    text: sampleText\n  };\n\n  componentDidMount () {\n    const text = localStorage.getItem('text');\n\n    if (text) {\n      this.setState({ text })\n    } else {\n      this.setState({ text: sampleText })\n    }\n  };\n\n  componentDidUpdate () {\n    const { text } = this.state;\n    localStorage.setItem('text', text);\n  };\n\n  handleChange = event => {\n    const text = event.target.value;\n    this.setState({ text });\n  };\n\n  renderText = text => {\n    const __html = marked(text);\n    return { __html };\n  };\n\n  render () {\n    return (\n      <div className='container'>\n        <img src=\"avataaars.png\" alt=\"logo\" height=\"280\" width=\"264\" className=\"logo\"/>\n        <div className='row'>\n          <div className='col-sm-6 mark'>\n            <textarea\n              onChange={this.handleChange}\n              value={this.state.text}\n              className='form-control'\n              rows='35' />\n          </div>\n          <div className='col-sm-6 html'>\n            <div dangerouslySetInnerHTML={this.renderText(this.state.text)} />\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}